{"ast":null,"code":"var _jsxFileName = \"D:\\\\weather-dashboard\\\\weather-dashboard\\\\client\\\\src\\\\components\\\\FavoriteCities.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FavoriteCities({\n  favoriteCities\n}) {\n  _s();\n  const [weatherData, setWeatherData] = useState([]);\n  useEffect(() => {\n    if (!favoriteCities || favoriteCities.length === 0) {\n      setWeatherData([]);\n      return;\n    }\n    const fetchAllWeather = async () => {\n      try {\n        const promises = favoriteCities.map(city => axios.get(`http://localhost:5000/api/weather?city=${city}`).then(res => res.data));\n        const results = await Promise.all(promises);\n        setWeatherData(results);\n      } catch (error) {\n        console.error(\"Failed to fetch favorite cities weather\", error);\n      }\n    };\n    fetchAllWeather();\n  }, [favoriteCities]);\n  if (weatherData.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No favorite cities added yet.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 40\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\",\n      gap: \"16px\",\n      marginTop: \"20px\"\n    },\n    children: weatherData.map(data => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid #ccc\",\n        borderRadius: \"8px\",\n        padding: \"12px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [data.name, \", \", data.sys.country]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          textTransform: \"capitalize\"\n        },\n        children: data.weather[0].description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temp: \", Math.round(data.main.temp), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", data.main.humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind: \", data.wind.speed, \" km/h\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)]\n    }, data.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(FavoriteCities, \"/WBsAESNl5X9UOGQ8x5/AmmeTCo=\");\n_c = FavoriteCities;\nexport default FavoriteCities;\nvar _c;\n$RefreshReg$(_c, \"FavoriteCities\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","FavoriteCities","favoriteCities","_s","weatherData","setWeatherData","length","fetchAllWeather","promises","map","city","get","then","res","data","results","Promise","all","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","gridTemplateColumns","gap","marginTop","border","borderRadius","padding","name","sys","country","textTransform","weather","description","Math","round","main","temp","humidity","wind","speed","id","_c","$RefreshReg$"],"sources":["D:/weather-dashboard/weather-dashboard/client/src/components/FavoriteCities.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction FavoriteCities({ favoriteCities }) {\r\n  const [weatherData, setWeatherData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!favoriteCities || favoriteCities.length === 0) {\r\n      setWeatherData([]);\r\n      return;\r\n    }\r\n\r\n    const fetchAllWeather = async () => {\r\n      try {\r\n        const promises = favoriteCities.map((city) =>\r\n          axios.get(`http://localhost:5000/api/weather?city=${city}`).then(res => res.data)\r\n        );\r\n        const results = await Promise.all(promises);\r\n        setWeatherData(results);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch favorite cities weather\", error);\r\n      }\r\n    };\r\n\r\n    fetchAllWeather();\r\n  }, [favoriteCities]);\r\n\r\n  if (weatherData.length === 0) return <p>No favorite cities added yet.</p>;\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\",\r\n        gap: \"16px\",\r\n        marginTop: \"20px\",\r\n      }}\r\n    >\r\n      {weatherData.map((data) => (\r\n        <div key={data.id} style={{ border: \"1px solid #ccc\", borderRadius: \"8px\", padding: \"12px\" }}>\r\n          <h3>{data.name}, {data.sys.country}</h3>\r\n          <p style={{ textTransform: \"capitalize\" }}>{data.weather[0].description}</p>\r\n          <p>Temp: {Math.round(data.main.temp)}Â°C</p>\r\n          <p>Humidity: {data.main.humidity}%</p>\r\n          <p>Wind: {data.wind.speed} km/h</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FavoriteCities;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}